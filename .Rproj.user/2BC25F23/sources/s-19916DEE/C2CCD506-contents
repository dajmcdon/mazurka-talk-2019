---
bibliography: chopinrefs.bib
output:
  pdf_document:
    fig_width: 6
    fig_height: 3.5
    fig_caption: true
    keep_tex: true
    template: suppl-template.tex
    includes:
      in_header: suppl-chopin.sty
---



```{r setup, echo=FALSE, message=FALSE, results='hide'}
library(dpf)
library(knitr)
library(splines)
opts_chunk$set(message=FALSE, warning=FALSE, cache=TRUE, 
               autodep = TRUE, echo=FALSE,
               include=FALSE,
               #out.width ="6in",out.height="3in",
               fig.path = 'gfx/',
               fig.width = 6, fig.height = 3, 
               fig.align = 'center')
library(gplots)
library(tidyverse)
library(heatmaply)
load("../extras/mazurkaResults.Rdata") 
source("dirichlet_precision.R")

pvec_ml = pvec_ml %>% select(-value,-fevals,-gevals,-convergence) %>%
  data.matrix %>% data.frame
# remove Block
# bad = which(rownames(pvec_ml)=="Block_1995")
# pvec_ml = pvec_ml[-bad,]
theme_set(theme_minimal(base_family="Times"))
data(tempos)
lt = diff(c(tempos$note.onset,61))
library(RColorBrewer)
fivecolors = viridis(5, option='plasma',begin=.2)[c(1,4,2,5,3)] #brewer.pal(5,'Set1')[c(2,1,3,5,4)]
library(dendextend)
```


# Algorithms


For completeness, we include here concise descriptions of the Kalman filter and smoother we employ as inputs to our main algorithm. The filter is given in \autoref{alg:kalman}.
\begin{algorithm}
  \caption{Kalman filter: estimate $x_i$ conditional on
    $\{y_j\}_{j=1}^i$, for all $i=1,\ldots,n$ and calculate the log likelihood
    for $\theta$\label{alg:kalman}}
  \begin{algorithmic}
    \STATE {\bf Input:} $Y$, $x_0$, $P_0$, $d,\ T,\ c,\ Z,$ and $G$
    \STATE $\ell(\theta) \leftarrow 0$ \COMMENT{Initialize the log-likelihood}
    \FOR{$i=1$ to  $n$}
    \STATE $\begin{aligned}\varx_{i}
      &\leftarrow d + T x_{i-1|i-1}, & P_i &\leftarrow Q + T P_{i-1|i-1}
      T^\top\end{aligned}$ \COMMENT{Predict current state}
    \STATE $\begin{aligned}\widetilde{y}_i
      &\leftarrow c + Z \varx_i, & F_i &\leftarrow G + Z P_i
      Z^\top\end{aligned}$ \COMMENT{Predict current observation}
    \STATE $\begin{aligned}v_i&\leftarrow y_i-\widetilde{y}_i& K_i&
      \leftarrow P_i Z^\top F^{-1}\end{aligned}$ \COMMENT{Forecast error and 
    Kalman gain}
    \STATE $\begin{aligned} x_{i|i}
      &\leftarrow \varx_i + K_i v_i, & P_{i|i} &\leftarrow P_i - P_iZ^\top
      K_i\end{aligned}$ \COMMENT{Update}
    \STATE $\ell(\theta) = \ell(\theta) -v_i^\top F^{-1}v_i - \log(|F_i|)$
    \ENDFOR
    \RETURN $\widetilde{Y}=\{\widetilde{y}_i\}_{i=1}^n,\ \varx=\{\varx_i\}_{i=1}^n,\
    \widetilde{X}=\{x_{i|i}\}_{i=1}^n,\ P=\{P_i\}_{i=1}^n,\
    \widetilde{P}=\{P_{i|i}\}_{i=1}^n,\ \ell(\theta)$
  \end{algorithmic}
\end{algorithm}

To
incorporate all future observations into these estimates, the Kalman
smoother is required. There are many different smoother algorithms tailored for different
applications. \autoref{alg:kalman-smoother}, due
to \citet{RauchStriebel1965}, is often referred to as the classical
fixed-interval smoother \citep{AndersonMoore1979}. It produces only
the unconditional expectations of the hidden state
$\hat{x}_i=\Expect{x_i\given y_1,\ldots,y_n}$ for the sake of
computational speed. This version is more appropriate for inference in
the type of switching models we discuss in the manuscript.

\begin{algorithm}
  \caption{Kalman smoother (Rauch-Tung-Striebel): estimate $\hat{X}$ conditional on
    $Y$\label{alg:kalman-smoother}} 
  \begin{algorithmic}
    \STATE {\bf Input:} $\varx$, $\widetilde{X}$, $P$, $\widetilde{P}$,
    $T,$ $c$, $Z$.
    \STATE $t=n$,
    \STATE $\hat{x}_{n}\leftarrow \widetilde{x}_n$, 
    \WHILE{$t>1$}
    \STATE $\hat{y}_i \leftarrow c + Z\hat{x}_i,$
    \COMMENT{Predict observation vector}
    \STATE $\begin{aligned} e &\leftarrow \hat{x}_i -
      \varx_i, & V &\leftarrow P_i^{-1}\end{aligned}$,
    \STATE $t\leftarrow i-1$, \COMMENT{Increment}
    \STATE $\hat{x}_i = \widetilde{x}_i + \widetilde{P}_i T Ve $ 
    \ENDWHILE
    \RETURN $\widehat{Y}=\{\hat{y}_i\}_{i=1}^n, \hat{X}=\{\hat{x}_i\}_{i=1}^n$
  \end{algorithmic}
\end{algorithm}



```{r small-rubinstein-1961,out.width="5in", out.height="2in", fig.width=7.5,fig.height=3}
ggplot(tempos, aes(x=note_onset, y=Rubinstein_1961)) +
  geom_line() + ylab('tempo (bpm)') + xlab('measure') +
  scale_x_continuous(breaks=1:4*2) +
  #geom_vline(xintercept = c(1,8.9,9)) +
  coord_cartesian(xlim=c(1,9),expand = FALSE) +
  geom_hline(yintercept = 132, linetype='dashed')
```


```{r clustering-processing}
perfs = tempos[,-c(1:3)] %>% as.matrix %>% t
row.names(pvec_ml) = sub('_',' ',row.names(pvec_ml))
hc_parm = pvec_ml %>% Dmats %>% Reduce(f='+')
row.names(hc_parm) = row.names(pvec_ml)
hc_perf = perfs %>% dist %>% percentize %>% hclust

dend_parm = hc_parm %>% as.dist %>% hclust %>% as.dendrogram
dend_perf = hc_perf %>% as.dendrogram
```



```{r parametric-clusters,fig.width=4,fig.height=4,out.width="3in",out.height="3in"}
#hc_parm = hc_parm+diag(1e-12,nrow(hc_parm))
othercut = .35
subs = apply(hc_parm,1,quantile,probs=4/46) < othercut
sDmat = hc_parm[subs,subs]
nclusts = 4
colorthem = TRUE
heatmap.2(
  hc_parm, Rowv = dend_parm, Colv = dend_parm, 
  symm=TRUE,
  dendrogram = 'none',
  density.info = 'none', trace='none',
          #labRow = TRUE,
  labCol = NA,
  key.title = NA,
  col= viridis,#colorRampPalette(c('#0b61a4','white')),
  key.xlab = NA, 
  margins = c(1,6),
  cexRow = .6,
  cexCol = .6,
  lhei=c(1,15),
  lwid=c(1,15),
  offsetCol = 0, offsetRow = 0,
  key=FALSE
)
sdends = sDmat %>% as.dist %>% hclust %>% as.dendrogram
if(colorthem) sdends = sdends %>% 
  set('labels_col', value=fivecolors[c(4,3,1,2)], k=nclusts) %>%
  set('branches_lty', 1) %>%
  set('branches_k_color', value=fivecolors[c(4,3,1,2)], k=nclusts)
heatmap.2(sDmat,
          Rowv = sdends, Colv = sdends,
          symm=TRUE,
          density.info = 'none', trace='none',
          #labRow = TRUE,
          labCol = NA,
          key.title = NA,
          col=viridis,#colorRampPalette(c('#0b61a4','white')),
          key.xlab = NA, 
          margins = c(1,6),
          cexRow = .6,
          cexCol = .6,
          lhei=c(1,8),
          lwid=c(1,8),
          offsetCol = 0, offsetRow = 0,
          key=FALSE
)

clustered = data.frame(clust = as.factor(cutree(as.hclust(sdends), k = nclusts)),
                 performer = row.names(sDmat))
pvec_all = pvec_ml %>% data.matrix %>% data.frame
pvec_all$performer = row.names(pvec_ml)
row.names(pvec_all) = NULL
pvec_all = full_join(pvec_all, clustered)
levels(pvec_all$clust) = c(levels(pvec_all$clust),'other')
pvec_all$clust[is.na(pvec_all$clust)] = 'other'
```

# Distance matrix from raw data

In \autoref{sec:clust-music-perf} of the manuscript, we present results for clustering performances using the low-dimensional vector of performance specific parameters learned for our model. An alternative approach is to simply use the raw data, in this case, 231 individual note-by-note instantaneous speeds measured in beats per minute. In \autoref{fig:raw-data-clusters} we show the result of this analysis. A comparison between this clustering and that given by our model is discussed in some detail in the manuscript.

```{r raw-data-clusters,fig.width=4,fig.height=4,out.width="3in",out.height="3in",include=TRUE,fig.cap="This figure presents a heatmap and hierarchical clustering based only on the note-by-note onset timings for each of the 46 recordings.",fig.pos="b"}
heatmap.2(as.matrix(percentize(dist(perfs))),
          Rowv = dend_perf, Colv = dend_perf, 
          symm=TRUE,
          density.info = 'none', trace='none',
          labRow = sub('_',' ',row.names(pvec_ml)),
          labCol = NA,
          key.title = NA,
          col=viridis,#colorRampPalette(c('#0b61a4','white')),
          key.xlab = NA, 
          margins = c(1,6),
          cexRow = .6,
          cexCol = .6,
          lhei=c(1,8),
          lwid=c(1,8),
          offsetCol = 0, offsetRow = 0,
          key=FALSE
)

```


```{r clust-densities, fig.height=8,fig.width=6.5}
lab_lookup = c("sigma[epsilon]^2", "mu[tempo]",
               "mu[acc]", "mu[stress]", "sigma[tempo]^2",
               "p[1*','*1]", "p[1*','*2]", "p[3*','*1]","p[1*','*3]",
               "p[2*','*1]","p[3*','*2]","p[2*','*2]")
               #sig2acc="sigma^2[acc]",sig2stress="sigma^2[stress]"
               #)
ttt = pvec_all %>% gather(key='parameter',value='value',-clust,-performer)
ttt$parameter = factor(ttt$parameter,levels=unique(ttt$parameter),
                       labels= lab_lookup)
ttt %>%
  ggplot(aes(x=value, fill=clust)) +
  geom_density(alpha=.75,adjust=1.75) +
  facet_wrap(~parameter,scales='free',
             labeller = label_parsed) +
  scale_fill_manual(values=fivecolors[1:(nclusts+1)]) + xlab('') +
  theme(legend.title = element_blank(), legend.position = 'bottom')
```

```{r clust-densities-sub1, fig.height=3,fig.width=8}
ttt %>% filter(parameter %in% lab_lookup[1:5],
               clust != 'other') %>%
  ggplot(aes(x=value, fill=clust)) +
  geom_density(alpha=.75,adjust=1.75) +
  facet_wrap(~parameter,scales='free',
             labeller = label_parsed, nrow=1) +
  scale_fill_manual(values=fivecolors[1:(nclusts+1)]) + xlab('') +
  theme(legend.title = element_blank(), legend.position = 'bottom')
```

```{r clust-densities-sub2, fig.height=5,fig.width=8}
ttt %>% filter(parameter %in% lab_lookup[6:12],
               clust != 'other') %>%
  ggplot(aes(x=value, fill=clust)) +
  geom_density(alpha=.75,adjust=1.75) +
  facet_wrap(~parameter,scales='free',
             labeller = label_parsed, nrow=2) +
  scale_fill_manual(values=fivecolors[1:(nclusts+1)]) + xlab('') +
  theme(legend.title = element_blank(), legend.position = 'bottom')
```


# Plotting performances

In \autoref{sec:clust-music-perf} discussed 4 distinct clusters of the 46 performances as well as an "other" category of relatively unique interpretations. Figures \ref{fig:clust-1} to \ref{fig:clust-other} display the note-by-note tempos along with the inferred interpretive decisions for all performances by clustering. Here we include some of the discussion of these clusters from the main text to clarify the figures.

```{r all-perfs, fig.width=6.5,fig.height=9}
plots = vector("list", 4)
lt = diff(c(tempos$note_onset, 61))
for(i in 1:nrow(pvec_ml)){
  params = unlist(pvec_ml[i,])
  y = matrix(tempos[,gsub(' ','_',row.names(pvec_ml)[i])], nrow = 1)
  pmats = musicModel(lt, params[1], params[2:4], c(params[5],1,1),
                     params[6:12], c(132,0), c(400,10))
  beam = beamSearch(pmats$a0, pmats$P0, c(1,0,0,0,0,0,0,0,0,0), 
                    pmats$dt, pmats$ct, pmats$Tt, pmats$Zt,
                    pmats$HHt, pmats$GGt, y, pmats$transMat, 400)
  bestpath = beam$paths[which.max(beam$weights),]
  kal = kalman(pmats, bestpath, y)
  plots[[i]] = data.frame(measure = tempos$note_onset, tempo = c(y), 
                  inferred = c(kal$ests), state = convert10to4(bestpath))
}
plots = bind_rows(plots)
plots$performer = rep(pvec_all$performer, each=length(y))
plots$clust = rep(pvec_all$clust, each=length(y))
plots$state = as.factor(plots$state) 
plots = plots %>% mutate(
  state=factor(state,labels=c('constant','decel','accel','stress'))
  )
perfcols = viridis_pal(begin=.2)(nlevels(plots$state))
# plots$pointx = 10
# plots$pointy = 400
# deunderscore = function(x) gsub('_',' ',x)
```

The first cluster (\autoref{fig:clust-1}) corresponds to performances which are reasonably
staid. The emphasis state is rarely visited with the performer tending
to stay in the constant tempo state with periods of slowing down at
the ends of phrases. Acceleration is never used. Such state
preferences are clearly inferred by the model as shown in, e.g., the
top row of \autoref{fig:clust-density-tp}. Furthermore, these
performances have relatively low average tempos, and not much
difference between the A and B sections.

```{r clust-1, fig.height=7, fig.width=5,include=TRUE, fig.cap="Performances in the first cluster."}
perfshapes = c(16,17,15,3)
ggplot(filter(plots, clust=='1')) + 
  geom_rect(data=data.frame(xmin = 33, xmax = 45, ymin = -Inf, ymax = Inf),
              aes(xmin=xmin,xmax=xmax,ymin=ymin,ymax=ymax),
              fill = 'gray90', color = 'gray90') +
  geom_line(aes(x=measure, y=tempo), color='gray40') +
  geom_point(aes(x=measure, y=inferred, color=state, shape=state)) +
  # scale_color_brewer(palette='Set1') +
  scale_color_manual(values=perfcols[c(1,2,4)]) +
  scale_shape_manual(values=perfshapes[c(1,2,4)]) +
  theme(legend.position = 'bottom', legend.title = element_blank(),
        strip.text = element_text(hjust = 0)) +
  facet_wrap(~performer,ncol=3) #+
```

Recordings in the second
cluster (\autoref{fig:clust-2}) tend to transition quickly between states, especially constant
tempo and slowing down accompanied by frequent transitory
emphases. The probability of remaining in state 1 is the lowest for
this cluster while the probability of entering state 2 from state 1 is
the highest. The acceleration state is visited only rarely.

```{r clust-2, fig.height=7, fig.width=5,include=TRUE, fig.cap="Performances in the second cluster."}
ggplot(filter(plots, clust=='2')) + 
  geom_rect(data=data.frame(xmin = 33, xmax = 45, ymin = -Inf, ymax = Inf),
              aes(xmin=xmin,xmax=xmax,ymin=ymin,ymax=ymax),
              fill = 'gray90', color = 'gray90') +
  geom_line(aes(x=measure, y=tempo), color='gray40') +
  geom_point(aes(x=measure, y=inferred, color=state, shape=state)) +
  # scale_color_brewer(palette='Set1') +
  scale_color_manual(values=perfcols)+#[c(1,2,4)]) +
  scale_shape_manual(values=perfshapes)+#[c(1,2,4)]) +
  theme(legend.position = 'bottom', 
        legend.title = element_blank(),
        strip.text = element_text(hjust = 0)) +
  facet_wrap(~performer,ncol = 3) #+
```

Cluster three (\autoref{fig:clust-3}) is somewhat like cluster one in that performers tend to
stay in state 1 for long periods of time, but they transition more
quickly from state 3 back to state 1. They also use state 4 frequently
whereas cluster one
did not. They also tend to have very large tempo
contrasts between the A and B sections.

```{r clust-3, fig.height=6, fig.width=5,include=TRUE, fig.cap="Performances in the third cluster."}
ggplot(filter(plots, clust=='3')) + 
  geom_rect(data=data.frame(xmin = 33, xmax = 45, ymin = -Inf, ymax = Inf),
              aes(xmin=xmin,xmax=xmax,ymin=ymin,ymax=ymax),
              fill = 'gray90', color = 'gray90') +
  geom_line(aes(x=measure, y=tempo), color='gray40') +
  geom_point(aes(x=measure, y=inferred, color=state,shape=state)) +
  # scale_color_brewer(palette='Set1') +
  scale_color_manual(values=perfcols[c(1,2,4)]) +
  scale_shape_manual(values=perfshapes[c(1,2,4)]) +
  theme(legend.position = 'bottom', 
        legend.title = element_blank(),
        strip.text = element_text(hjust = 0)) +
  facet_wrap(~performer,ncol=3) #+
```

Cluster four (\autoref{fig:clust-4}) has both faster average tempos and more variability from one period of
constant tempo to the next. State 4 is rare, with fast constant tempo
changes that persist for small amounts of time tending to reflect note
emphases.


```{r clust-4, eval=TRUE, fig.height=6, fig.width=5,include=TRUE, fig.cap="Performances in the fourth cluster."}
ggplot(filter(plots, clust=='4')) + 
  geom_rect(data=data.frame(xmin = 33, xmax = 45, ymin = -Inf, ymax = Inf),
              aes(xmin=xmin,xmax=xmax,ymin=ymin,ymax=ymax),
              fill = 'gray90', color = 'gray90') +
  geom_line(aes(x=measure, y=tempo), color='gray40') +
  geom_point(aes(x=measure, y=inferred, color=state,shape=state)) +
  # scale_color_brewer(palette='Set1') +
  scale_color_manual(values=perfcols)+#[c(1,2,4)]) +
  scale_shape_manual(values=perfshapes)+#[c(1,2,4)]) +
  theme(legend.position = 'bottom', legend.title = element_blank(),
        strip.text = element_text(hjust = 0)) +
  facet_wrap(~performer,ncol=3) #+
```

The remaining performances are relatively different from all other performances (\autoref{fig:clust-other}). If the distance to the third closest performances exceeded `r othercut`, then the performance was grouped with "other". Essentially, these recordings had at most one similar recording while the four other clusters contained at least `r min(table(pvec_all$clust))`.

```{r clust-other, fig.height=7, fig.width=5,include=TRUE, fig.cap="Performances in the ``other'' cluster."}
ggplot(filter(plots, clust=='other')) + 
  geom_rect(data=data.frame(xmin = 33, xmax = 45, ymin = -Inf, ymax = Inf),
              aes(xmin=xmin,xmax=xmax,ymin=ymin,ymax=ymax),
              fill = 'gray90', color = 'gray90') +
  geom_line(aes(x=measure, y=tempo), color='gray40') +
  geom_point(aes(x=measure, y=inferred, color=state,shape=state)) +
  # scale_color_brewer(palette='Set1') +
  scale_color_manual(values=perfcols) +
  theme(legend.position = 'bottom', legend.title = element_blank(),
        strip.text = element_text(hjust = 0)) +
  facet_wrap(~performer,ncol=3) #+
```






```{r richter}
ggplot(filter(plots, performer == 'Richter 1976')) + 
  geom_rect(data=data.frame(xmin = 33, xmax = 45, ymin = -Inf, ymax = Inf),
              aes(xmin=xmin,xmax=xmax,ymin=ymin,ymax=ymax),
              fill = 'gray90', color = 'gray90') +
  geom_line(aes(x=measure, y=tempo), color='gray40') +
  geom_point(aes(x=measure, y=inferred, color=state,shape=state)) +
 # scale_color_brewer(palette='Set1') +
  scale_color_manual(values=perfcols) +
  theme(legend.position = 'bottom', legend.title = element_blank(),
        strip.text = element_text(hjust = 0)) +
  facet_wrap(~performer) #+
  # geom_point(aes(x=pointx,y=pointy,color=clust),alpha=.5, size=5, shape=15) + 
  # scale_color_manual(values = fivecolors)
```

```{r hatto}
ggplot(filter(plots, performer == 'Hatto 1993')) + 
  geom_rect(data=data.frame(xmin = 33, xmax = 45, ymin = -Inf, ymax = Inf),
              aes(xmin=xmin,xmax=xmax,ymin=ymin,ymax=ymax),
              fill = 'gray90', color = 'gray90') +
  geom_line(aes(x=measure, y=tempo), color='gray40') +
  geom_point(aes(x=measure, y=inferred, color=state)) +
  # scale_color_brewer(palette='Set1') +
  scale_color_manual(values=perfcols[c(1,2)]) +
  scale_shape_manual(values=perfshapes[c(1,2)]) +
  theme(legend.position = 'bottom', 
        legend.title = element_blank(),
        strip.text = element_text(hjust = 0)) +
  facet_wrap(~performer) #+
  # geom_point(aes(x=pointx,y=pointy,color=clust),alpha=.5, size=5, shape=15) + 
  # scale_color_manual(values = fivecolors)
```

```{r cortot-performance}
ggplot(filter(plots, performer == 'Cortot 1951')) + 
  geom_rect(data=data.frame(xmin = 33, xmax = 45, ymin = -Inf, ymax = Inf),
              aes(xmin=xmin,xmax=xmax,ymin=ymin,ymax=ymax),
              fill = 'gray90', color = 'gray90') +
  geom_line(aes(x=measure, y=tempo), color='gray40') +
  geom_point(aes(x=measure, y=inferred, color=state,shape=state)) +
  # scale_color_brewer(palette='Set1') +
  scale_color_manual(values=perfcols[c(1,3,4)]) +
  scale_shape_manual(values=perfshapes[c(1,3,4)]) +
  theme(legend.position = 'bottom', 
        legend.title = element_blank(),
        strip.text = element_text(hjust = 0)) +
  facet_wrap(~performer) #+
  # geom_point(aes(x=pointx,y=pointy,color=clust),alpha=.5, size=5, shape=15) + 
  # scale_color_manual(values = fivecolors)
```

```{r two-performances,fig.height=3,out.height="2in"}
filter(plots, performer %in% c('Richter 1976','Hatto 1993')) %>%
  ggplot() + 
  geom_rect(data=data.frame(xmin = 33, xmax = 45, ymin = -Inf, ymax = Inf),
              aes(xmin=xmin,xmax=xmax,ymin=ymin,ymax=ymax),
              fill = 'gray90', color = 'gray90') +
  geom_line(aes(x=measure, y=tempo), color='gray40') +
  geom_point(aes(x=measure, y=inferred, color=state, shape=state)) +
  # scale_color_brewer(palette='Set1') +
  scale_color_manual(values=perfcols) +
  theme(legend.position = 'bottom', legend.title = element_blank(),
        strip.text = element_text(hjust = 0)) +
  facet_wrap(~performer,nrow = 1) #+
  # geom_point(aes(x=pointx,y=pointy,color=clust),alpha=.5, size=5, shape=15) + 
  # scale_color_manual(values = fivecolors)
```


```{r two-perfs-parameters}
kable(pvec_ml[c('Richter 1976','Hatto 1993','Cortot 1951'),],
      digits = 2, format = 'latex')
```




```{r alternative-smoothers}
nsplines = 64 # 1 knot per bar plus boundary
B = bs(tempos$note_onset, df=nsplines, intercept = TRUE)
single.knots = match(seq(4,56,by=4)+1,tempos$meas_num)
double.knots = match(c(16,24,32,44)+1, tempos$meas_num)
triple.knots = match(c(16,24,32,44)+1, tempos$meas_num)
quad.knots = match(c(16,24,32,44)+1, tempos$meas_num)
all.knots = tempos$note_onset[
  sort(c(single.knots,double.knots,triple.knots,quad.knots))]
B1 = bs(tempos$note_onset, knots = all.knots, intercept = TRUE,Boundary.knots = c(1,61))

spline_music = plots %>% group_by(performer) %>% 
  mutate(preds_smooth = fitted(lm(tempo~B-1)), 
         preds_music = fitted(lm(tempo~B1-1)))
filter(spline_music , performer %in% c('Richter 1976')) %>%
  gather(key='key',value = 'value', -tempo, 
         -measure, -state, -performer, -clust) %>%
  ggplot() + 
  geom_rect(data=data.frame(xmin = 33, xmax = 45, ymin = -Inf, ymax = Inf),
              aes(xmin=xmin,xmax=xmax,ymin=ymin,ymax=ymax),
              fill = 'gray90', color = 'gray90', show.legend = FALSE) +
  geom_point(aes(x=measure, y=tempo), color='gray40', show.legend = FALSE) +
  geom_line(aes(x=measure, y=value, color=key)) + 
  scale_color_viridis_d(option = 'plasma',
                        labels=c('music model','musical spline','regression spline')) +
  theme(legend.position = 'bottom', legend.title = element_blank(),
        strip.text = element_text(hjust = 0)) +
  facet_wrap(~performer,nrow=2) #+
  # geom_rect(aes(xmin=pointx-2.5, xmax=pointx+2.5,
  #               ymin=pointy-2.5,ymax=pointy+2.5,fill=clust), 
  #           show.legend = FALSE,
  #            alpha=.5,size=5) + 
  # scale_fill_manual(values = fivecolors) 
```





```{r similar-perfs,fig.height=4}
similar = c('Wasowski 1980','Shebanova 2002','Luisada 1991','Milkina 1970')
ggplot(filter(plots, performer %in% similar)) + 
  geom_rect(data=data.frame(xmin = 33, xmax = 45, ymin = -Inf, ymax = Inf),
              aes(xmin=xmin,xmax=xmax,ymin=ymin,ymax=ymax),
              fill = 'gray90', color = 'gray90') +
  geom_line(aes(x=measure, y=tempo), color='gray40') +
  geom_point(aes(x=measure, y=inferred, color=state,shape=state)) +
  # scale_color_brewer(palette='Set1') +
  scale_color_manual(values=perfcols) +
  theme(legend.position = 'bottom', legend.title = element_blank(),
        strip.text = element_text(hjust = 0)) +
  facet_wrap(~performer,nrow=2) #+
  # geom_point(aes(x=pointx,y=pointy,color=clust),alpha=.5, size=5, shape=15) + 
  # scale_color_manual(values = fivecolors)
```


```{r rubinstein-perfs, fig.height=4}
similar = c('Rubinstein 1939', 'Rubinstein 1952',
            'Rubinstein 1961','Rubinstein 1966')
ggplot(filter(plots, performer %in% similar)) + 
  geom_rect(data=data.frame(xmin = 33, xmax = 45, ymin = -Inf, ymax = Inf),
              aes(xmin=xmin,xmax=xmax,ymin=ymin,ymax=ymax),
              fill = 'gray90', color = 'gray90') +
  geom_line(aes(x=measure, y=tempo), color='gray40') +
  geom_point(aes(x=measure, y=inferred, color=state,shape=state)) +
  # scale_color_brewer(palette='Set1') +
  scale_color_manual(values=perfcols) +
  theme(legend.position = 'none', legend.title = element_blank(),
        strip.text = element_text(hjust = 0)) +
  facet_wrap(~performer,nrow=2) #+
  # geom_point(aes(x=pointx,y=pointy,color=clust),alpha=.5, size=5, shape=15) + 
  # scale_color_manual(values = fivecolors)
```

```{r similar-rubin-parameters}
kable(pvec_ml[c(
  'Wasowski 1980','Shebanova 2002','Luisada 1991','Milkina 1970',
  'Rubinstein 1939', 'Rubinstein 1952',
  'Rubinstein 1961','Rubinstein 1966'),],
      digits = 2, format = 'latex')
```



```{r bad-model,fig.height=3,out.height="2in"}
ggplot(filter(plots, performer %in% c('Barbosa 1983','Fou 1978'))) + 
  geom_rect(data=data.frame(xmin = 33, xmax = 45, ymin = -Inf, ymax = Inf),
              aes(xmin=xmin,xmax=xmax,ymin=ymin,ymax=ymax),
              fill = 'gray90', color = 'gray90') +
  geom_line(aes(x=measure, y=tempo), color='gray40') +
  geom_point(aes(x=measure, y=inferred, color=state,shape=state)) +
  # scale_color_brewer(palette='Set1') +
  scale_color_manual(values=perfcols) +
  theme(legend.position = 'none', legend.title = element_blank(),
        strip.text = element_text(hjust = 0)) +
  facet_wrap(~performer)
```
